diff -Naur newplugin/HISTORY usingpsl/HISTORY
--- newplugin/HISTORY	2013-03-29 19:02:31.000000000 +0100
+++ usingpsl/HISTORY	2013-03-29 18:28:15.168966000 +0100
@@ -1,5 +1,5 @@
-VDR Plugin 'newplugin' Revision History
----------------------------------------
+VDR Plugin 'usingpsl' Revision History
+------------------------------------
 
 2013-03-29: Version 0.0.1
 
diff -Naur newplugin/Makefile usingpsl/Makefile
--- newplugin/Makefile	2013-03-29 19:02:31.000000000 +0100
+++ usingpsl/Makefile	2013-03-30 08:52:51.456073000 +0100
@@ -7,7 +7,7 @@
 # This name will be used in the '-P...' option of VDR to load the plugin.
 # By default the main source file also carries this name.
 
-PLUGIN = newplugin
+PLUGIN = usingpsl
 
 ### The version number of this plugin (taken from the main source file):
 
@@ -23,6 +23,10 @@
 #
 TMPDIR ?= /tmp
 
+# using PSL 'funcxy'
+PKGCFGfuncxy = $(if $(VDRDIR),$(shell pkg-config --variable=$(1) $(VDRDIR)/vdr-psl-funcxy.pc),$(shell pkg-config --variable=$(1) vdr-psl-funcxy || pkg-config --variable=$(1) ../../../vdr-psl-funcxy.pc))
+
+
 ### The compiler options:
 
 export CFLAGS   = $(call PKGCFG,cflags)
@@ -51,6 +55,10 @@
 
 DEFINES += -DPLUGIN_NAME_I18N='"$(PLUGIN)"'
 
+### Additional libraries to link against
+
+LIBS += $(call PKGCFGfuncxy,Libs) $(call PKGCFGfuncxy,Libs.private)
+LDFLAGS += $(call PKGCFGfuncxy,ldflags)
 ### The object files (add further files here):
 
 OBJS = $(PLUGIN).o
@@ -102,7 +110,7 @@
 ### Targets:
 
 $(SOFILE): $(OBJS)
-	$(CXX) $(CXXFLAGS) $(LDFLAGS) -shared $(OBJS) -o $@
+	$(CXX) $(CXXFLAGS) $(LDFLAGS) -shared $(OBJS) $(LIBS) -o $@
 
 install-lib: $(SOFILE)
 	install -D $^ $(DESTDIR)$(LIBDIR)/$^.$(APIVERSION)
diff -Naur newplugin/newplugin.c usingpsl/newplugin.c
--- newplugin/newplugin.c	2013-03-29 19:02:31.000000000 +0100
+++ usingpsl/newplugin.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,141 +0,0 @@
-/*
- * newplugin.c: A plugin for the Video Disk Recorder
- *
- * See the README file for copyright information and how to reach the author.
- *
- * $Id$
- */
-
-#include <vdr/plugin.h>
-
-static const char *VERSION        = "0.0.1";
-static const char *DESCRIPTION    = "Enter description for 'newplugin' plugin";
-static const char *MAINMENUENTRY  = "Newplugin";
-
-class cPluginNewplugin : public cPlugin {
-private:
-  // Add any member variables or functions you may need here.
-public:
-  cPluginNewplugin(void);
-  virtual ~cPluginNewplugin();
-  virtual const char *Version(void) { return VERSION; }
-  virtual const char *Description(void) { return DESCRIPTION; }
-  virtual const char *CommandLineHelp(void);
-  virtual bool ProcessArgs(int argc, char *argv[]);
-  virtual bool Initialize(void);
-  virtual bool Start(void);
-  virtual void Stop(void);
-  virtual void Housekeeping(void);
-  virtual void MainThreadHook(void);
-  virtual cString Active(void);
-  virtual time_t WakeupTime(void);
-  virtual const char *MainMenuEntry(void) { return MAINMENUENTRY; }
-  virtual cOsdObject *MainMenuAction(void);
-  virtual cMenuSetupPage *SetupMenu(void);
-  virtual bool SetupParse(const char *Name, const char *Value);
-  virtual bool Service(const char *Id, void *Data = NULL);
-  virtual const char **SVDRPHelpPages(void);
-  virtual cString SVDRPCommand(const char *Command, const char *Option, int &ReplyCode);
-  };
-
-cPluginNewplugin::cPluginNewplugin(void)
-{
-  // Initialize any member variables here.
-  // DON'T DO ANYTHING ELSE THAT MAY HAVE SIDE EFFECTS, REQUIRE GLOBAL
-  // VDR OBJECTS TO EXIST OR PRODUCE ANY OUTPUT!
-}
-
-cPluginNewplugin::~cPluginNewplugin()
-{
-  // Clean up after yourself!
-}
-
-const char *cPluginNewplugin::CommandLineHelp(void)
-{
-  // Return a string that describes all known command line options.
-  return NULL;
-}
-
-bool cPluginNewplugin::ProcessArgs(int argc, char *argv[])
-{
-  // Implement command line argument processing here if applicable.
-  return true;
-}
-
-bool cPluginNewplugin::Initialize(void)
-{
-  // Initialize any background activities the plugin shall perform.
-  return true;
-}
-
-bool cPluginNewplugin::Start(void)
-{
-  // Start any background activities the plugin shall perform.
-  return true;
-}
-
-void cPluginNewplugin::Stop(void)
-{
-  // Stop any background activities the plugin is performing.
-}
-
-void cPluginNewplugin::Housekeeping(void)
-{
-  // Perform any cleanup or other regular tasks.
-}
-
-void cPluginNewplugin::MainThreadHook(void)
-{
-  // Perform actions in the context of the main program thread.
-  // WARNING: Use with great care - see PLUGINS.html!
-}
-
-cString cPluginNewplugin::Active(void)
-{
-  // Return a message string if shutdown should be postponed
-  return NULL;
-}
-
-time_t cPluginNewplugin::WakeupTime(void)
-{
-  // Return custom wakeup time for shutdown script
-  return 0;
-}
-
-cOsdObject *cPluginNewplugin::MainMenuAction(void)
-{
-  // Perform the action when selected from the main VDR menu.
-  return NULL;
-}
-
-cMenuSetupPage *cPluginNewplugin::SetupMenu(void)
-{
-  // Return a setup menu in case the plugin supports one.
-  return NULL;
-}
-
-bool cPluginNewplugin::SetupParse(const char *Name, const char *Value)
-{
-  // Parse your own setup parameters and store their values.
-  return false;
-}
-
-bool cPluginNewplugin::Service(const char *Id, void *Data)
-{
-  // Handle custom service requests from other plugins
-  return false;
-}
-
-const char **cPluginNewplugin::SVDRPHelpPages(void)
-{
-  // Return help text for SVDRP commands this plugin implements
-  return NULL;
-}
-
-cString cPluginNewplugin::SVDRPCommand(const char *Command, const char *Option, int &ReplyCode)
-{
-  // Process SVDRP commands this plugin implements
-  return NULL;
-}
-
-VDRPLUGINCREATOR(cPluginNewplugin); // Don't touch this!
diff -Naur newplugin/usingpsl.c usingpsl/usingpsl.c
--- newplugin/usingpsl.c	1970-01-01 01:00:00.000000000 +0100
+++ usingpsl/usingpsl.c	2013-03-30 12:03:52.349073000 +0100
@@ -0,0 +1,144 @@
+/*
+ * usingpsl.c: A plugin for the Video Disk Recorder
+ *
+ * See the README file for copyright information and how to reach the author.
+ *
+ * $Id$
+ */
+
+#include <vdr/plugin.h>
+#include <vdr/psl-funcxy.h>
+
+
+static const char *VERSION        = "0.0.1";
+static const char *DESCRIPTION    = "Enter description for 'usingpsl' plugin";
+static const char *MAINMENUENTRY  = "Usingpsl";
+
+class cPluginUsingPsl : public cPlugin {
+private:
+  // Add any member variables or functions you may need here.
+  PslFuncXy::cMyClass object;
+public:
+  cPluginUsingPsl(void);
+  virtual ~cPluginUsingPsl();
+  virtual const char *Version(void) { return VERSION; }
+  virtual const char *Description(void) { return DESCRIPTION; }
+  virtual const char *CommandLineHelp(void);
+  virtual bool ProcessArgs(int argc, char *argv[]);
+  virtual bool Initialize(void);
+  virtual bool Start(void);
+  virtual void Stop(void);
+  virtual void Housekeeping(void);
+  virtual void MainThreadHook(void);
+  virtual cString Active(void);
+  virtual time_t WakeupTime(void);
+  virtual const char *MainMenuEntry(void) { return MAINMENUENTRY; }
+  virtual cOsdObject *MainMenuAction(void);
+  virtual cMenuSetupPage *SetupMenu(void);
+  virtual bool SetupParse(const char *Name, const char *Value);
+  virtual bool Service(const char *Id, void *Data = NULL);
+  virtual const char **SVDRPHelpPages(void);
+  virtual cString SVDRPCommand(const char *Command, const char *Option, int &ReplyCode);
+  };
+
+cPluginUsingPsl::cPluginUsingPsl(void)
+{
+  // Initialize any member variables here.
+  // DON'T DO ANYTHING ELSE THAT MAY HAVE SIDE EFFECTS, REQUIRE GLOBAL
+  // VDR OBJECTS TO EXIST OR PRODUCE ANY OUTPUT!
+}
+
+cPluginUsingPsl::~cPluginUsingPsl()
+{
+  // Clean up after yourself!
+}
+
+const char *cPluginUsingPsl::CommandLineHelp(void)
+{
+  // Return a string that describes all known command line options.
+  return NULL;
+}
+
+bool cPluginUsingPsl::ProcessArgs(int argc, char *argv[])
+{
+  // Implement command line argument processing here if applicable.
+  return true;
+}
+
+bool cPluginUsingPsl::Initialize(void)
+{
+  // Initialize any background activities the plugin shall perform.
+  return true;
+}
+
+bool cPluginUsingPsl::Start(void)
+{
+  // Start any background activities the plugin shall perform.
+  return true;
+}
+
+void cPluginUsingPsl::Stop(void)
+{
+  // Stop any background activities the plugin is performing.
+}
+
+void cPluginUsingPsl::Housekeeping(void)
+{
+  // Perform any cleanup or other regular tasks.
+}
+
+void cPluginUsingPsl::MainThreadHook(void)
+{
+  // Perform actions in the context of the main program thread.
+  // WARNING: Use with great care - see PLUGINS.html!
+}
+
+cString cPluginUsingPsl::Active(void)
+{
+  // Return a message string if shutdown should be postponed
+  return NULL;
+}
+
+time_t cPluginUsingPsl::WakeupTime(void)
+{
+  // Return custom wakeup time for shutdown script
+  return 0;
+}
+
+cOsdObject *cPluginUsingPsl::MainMenuAction(void)
+{
+  // Perform the action when selected from the main VDR menu.
+  return NULL;
+}
+
+cMenuSetupPage *cPluginUsingPsl::SetupMenu(void)
+{
+  // Return a setup menu in case the plugin supports one.
+  return NULL;
+}
+
+bool cPluginUsingPsl::SetupParse(const char *Name, const char *Value)
+{
+  // Parse your own setup parameters and store their values.
+  return false;
+}
+
+bool cPluginUsingPsl::Service(const char *Id, void *Data)
+{
+  // Handle custom service requests from other plugins
+  return false;
+}
+
+const char **cPluginUsingPsl::SVDRPHelpPages(void)
+{
+  // Return help text for SVDRP commands this plugin implements
+  return NULL;
+}
+
+cString cPluginUsingPsl::SVDRPCommand(const char *Command, const char *Option, int &ReplyCode)
+{
+  // Process SVDRP commands this plugin implements
+  return NULL;
+}
+
+VDRPLUGINCREATOR(cPluginUsingPsl); // Don't touch this!
